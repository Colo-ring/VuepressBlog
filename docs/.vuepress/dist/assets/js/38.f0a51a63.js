(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{536:function(a,t,s){"use strict";s.r(t);var e=s(3),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"makefile-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefile-介绍"}},[a._v("#")]),a._v(" Makefile 介绍")]),a._v(" "),s("h3",{attrs:{id:"一、makefile-规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、makefile-规则"}},[a._v("#")]),a._v(" 一、Makefile 规则")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prerequisites ...\ncommand\n...\n...\n")])])]),s("ul",[s("li",[s("strong",[a._v("target")]),a._v(" 可以是一个 object file（目标文件），也可以是一个执行文件，还可以是一个标签（label）。")]),a._v(" "),s("li",[s("strong",[a._v("prerequisites")]),a._v(" 生成该 target 所依赖的文件和/或 target")]),a._v(" "),s("li",[s("strong",[a._v("command")]),a._v(" 该 target 要执行的命令（任意的 shell 命令） 这是一个文件的依赖关系，也就是说，target 这一个或多个的目标文件依赖于 prerequisites 中的文件，其生成规则定义在 command 中。")])]),a._v(" "),s("p",[s("strong",[a._v("prerequisites 中如果有一个以上的文件比 target 文件要新的话，command 所定义的命令就会被执行。")])]),a._v(" "),s("p",[s("strong",[a._v("示例：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("edit")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" main.o kbd.o command.o display.o \\\n\t\tinsert.o search.o files.o utils.o\n\tcc -o edit main.o kbd.o command.o display.o \\\n\t\tinsert.o search.o files.o utils.o\n\t\t\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("main.o")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" main.c defs.h\n\tcc -c main.c\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("kbd.o")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" kbd.c defs.h command.h\n\tcc -c kbd.c\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("command.o")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" command.c defs.h command.h\n\tcc -c command.c\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("display.o")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" display.c defs.h buffer.h\n\tcc -c display.c\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("insert.o")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" insert.c defs.h buffer.h\n\tcc -c insert.c\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("search.o")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" search.c defs.h buffer.h\n\tcc -c search.c\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("files.o")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" files.c defs.h buffer.h command.h\n\tcc -c files.c\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("utils.o")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" utils.c defs.h\n\tcc -c utils.c\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\trm edit main.o kbd.o command.o display.o \\\n        insert.o search.o files.o utils.o\n")])])]),s("p",[a._v("在默认的方式下，我们只输入 make 命令。")]),a._v(" "),s("ol",[s("li",[a._v("make 会在当前目录下找名字叫“Makefile”或“makefile”的文件。")]),a._v(" "),s("li",[a._v("如果找到，它会找文件中的第一个目标文件，在上面的例子中，他会找到 "),s("code",[a._v("edit")]),a._v(" 这个文 件，并把这个文件作为最终的目标文件。")]),a._v(" "),s("li",[a._v("如果 edit 文件不存在，或是 edit 所依赖的后面的 .o 文件的文件修改时间要比 edit 这个文件新， 那么，他就会执行后面所定义的命令来生成 edit 这个文件。")]),a._v(" "),s("li",[a._v("如果 edit 所依赖的 .o 文件也不存在，那么 make 会在当前文件中找目标为 .o 文件的依赖性，如 果找到则再根据那一个规则生成 .o 文件。（点像一个堆栈的过程）")]),a._v(" "),s("li",[a._v("当然， C 文件和 H 文件得存在，于是 make 会生成 .o 文件，然后再用 .o 文件生成 make 的终极任务，也就是执行文件 edit 了。")])]),a._v(" "),s("h3",{attrs:{id:"二、makefile-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、makefile-变量"}},[a._v("#")]),a._v(" 二、Makefile 变量")]),a._v(" "),s("p",[s("strong",[a._v("定义变量：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("OBJS"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("main.o tool1.o tool2.o\n")])])]),s("p",[s("strong",[a._v("使用变量：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("OBJS"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("main.o tool1.o tool2.o\nCC"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("gcc\nCFLAGS"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v("-c -Wall -g\n\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("mytool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("OBJS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("OBJS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o mytool\n\t\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("main.o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("main.c\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" main.c "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CFLAGS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o main.o\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("tool1.o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("tool1.c\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" tool1.c "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CFLAGS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o tool1.o\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("tool2.o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("tool2.c\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" tool2.c "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CFLAGS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o tool2.o\n\t\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("RM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" *.o mytool -r\n")])])]),s("p",[s("strong",[a._v("OBJS：")]),a._v(" 变量，自定义")]),a._v(" "),s("p",[s("strong",[a._v("CC：")]),a._v(" 指定编译器")]),a._v(" "),s("p",[s("strong",[a._v("CFLAGS：")]),a._v(" 指定编译指令")]),a._v(" "),s("p",[s("strong",[a._v("RM：")]),a._v(" 默认为"),s("code",[a._v("rm -f")])]),a._v(" "),s("hr"),a._v(" "),s("p",[s("code",[a._v("$^")]),a._v("：所有依赖的文件，即"),s("code",[a._v("OBJS")])]),a._v(" "),s("p",[s("code",[a._v("$@")]),a._v("：所有的目标文件，即"),s("code",[a._v("mytool")])]),a._v(" "),s("p",[s("strong",[a._v("简写：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("OBJS"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("main.o tool1.o tool2.o\nCC"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("gcc\nCFLAGS"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v("-c -Wall -g\n\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("mytool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("OBJS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$^")]),a._v(" -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("main.o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("main.c\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$^")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CFLAGS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("tool1.o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("tool1.c\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$^")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CFLAGS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("tool2.o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("tool2.c\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$^")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CFLAGS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n\t\t\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("RM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" *.o mytool -r\n")])])]),s("hr"),a._v(" "),s("p",[s("strong",[a._v("%：")]),a._v(" 通配符")]),a._v(" "),s("p",[s("strong",[a._v("%.o:%.c：")]),a._v(" 表示目标文件.o需要同名的依赖文件.c")]),a._v(" "),s("p",[s("strong",[a._v("简写：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("OBJS"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("main.o tool1.o tool2.o\nCC"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("gcc\nCFLAGS"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v("-c -Wall -g\n\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("mytool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("OBJS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$^")]),a._v(" -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("%.o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("%.c\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$^")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CFLAGS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v("\n\t\t\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("RM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" *.o mytool -r\n")])])]),s("hr"),a._v(" "),s("p",[s("strong",[a._v("GUN 自动推导：")])]),a._v(" "),s("p",[a._v("只要 make 看到一个 .o 文件，它就会自动的把 .c 文件加在依赖关系中，如果 make 找到一个 whatever.o ，那么 whatever.c 就会是 whatever.o 的依赖文件。并且 cc -c whatever.c 也会被推导出来。")]),a._v(" "),s("h2",{attrs:{id:"makefile-书写规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefile-书写规则"}},[a._v("#")]),a._v(" Makefile 书写规则")]),a._v(" "),s("h3",{attrs:{id:"一、使用通配符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、使用通配符"}},[a._v("#")]),a._v(" 一、使用通配符")]),a._v(" "),s("p",[a._v("make 支持三个通配符： * ，? 和 ~ 。这是和 Unix 的 B-Shell 是相同的。")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("objects "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" *.o\n")])])]),s("p",[a._v("并不是说 *.o 会展开，不！objects 的值就是 *.o 。"),s("strong",[a._v("Makefile 中的变量其实就是 C/C++ 中的宏。")])]),a._v(" "),s("p",[a._v("如果要让通配符在变量中展开，也就是让 objects 的值是所有 .o 的文件名的集合，那么，可以这样：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("objects "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("wildcard")]),a._v(" *.o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[s("strong",[a._v("例：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1、列出一确定文件夹中的所有 .c 文件。")]),a._v("\nobjects "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("wildcard")]),a._v(" *.o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 2、列出 1 中所有文件对应的 .o 文件，在 3 中我们可以看到它是由 make 自动编译出的:")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("patsubst")]),a._v(" %.c,%.o,"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("wildcard")]),a._v(" *.c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 由 1、2 两步，可写出编译并链接所有 .c 和 .o 文件")]),a._v("\nobjects "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("patsubst")]),a._v(" %.c,%.o,"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("wildcard")]),a._v(" *.c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("foo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tcc -o foo "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"二、文件搜寻"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、文件搜寻"}},[a._v("#")]),a._v(" 二、文件搜寻")]),a._v(" "),s("p",[a._v("Makefile 文件中的特殊变量 VPATH 完成自动寻找路径，如果没有指明这个变量，make 只会在当前的目录中去找寻依赖文件和目标文件。如果定义了这个变量，那么，make 就会在当前目录找不到的情况下，到所指定的目录中去找寻文件了。")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("VPATH "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("../headers\n")])])]),s("p",[a._v("上面的定义指定两个目录，"),s("code",[a._v("src")]),a._v(" 和 "),s("code",[a._v("../headers")]),a._v("，make 会按照这个顺序进行搜索。目录由"),s("strong",[a._v("冒号")]),a._v("分隔。（当然，当前目录永远是最高优先搜索的地方）")]),a._v(" "),s("p",[a._v("另一个设置文件搜索路径的方法是使用 make 的 "),s("strong",[a._v("vpath")]),a._v(" 关键字（全小写），这不是变量，这是一个 make 的关键字，它可以指定不同的文件在不同的搜索目录中。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("vpath <pattern> <directories>")]),a._v("：为符合模式 pattern 的文件指定搜索目录 directories")]),a._v(" "),s("li",[s("code",[a._v("vpath <pattern>")]),a._v(" ：清除符合模式的文件的搜索目录")]),a._v(" "),s("li",[s("code",[a._v("vpath")]),a._v(" ：清除所有已被设置好了的文件搜索目录")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# %：匹配零或若干字符")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("vpath")]),a._v(" %.h ../headers\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 要求 make 在“../headers”目录下搜索所有以 .h 结尾的文件。（如果某文件在当前目录没有找到的话）")]),a._v("\n")])])]),s("p",[a._v("我们可以连续地使用 vpath 语句，以指定不同搜索策略。如果连续的 vpath 语句中出现了相同的 "),s("code",[a._v("<pattern>")]),a._v("，或是被重复了的 "),s("code",[a._v("<pattern>")]),a._v("，那么，make 会按照 vpath 语句的先后顺序来执行搜索。如：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("vpath")]),a._v(" %.c foo\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("vpath")]),a._v(" %.c blish\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("vpath")]),a._v(" %.c bar\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 表示.c 结尾的文件，先在“foo”目录，然后是“blish”，最后是“bar”目录。")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("vpath %.c foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("bar\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("vpath")]),a._v(" %.c blish\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 表示 .c 结尾的文件，先在“foo”目录，然后是“bar”目录，最后才是“blish”目录。")]),a._v("\n")])])]),s("h3",{attrs:{id:"三、伪目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、伪目标"}},[a._v("#")]),a._v(" 三、伪目标")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("RM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" *.o mytool -r\n")])])]),s("ul",[s("li",[a._v("我们并不生成 “clean” 这个文件。")]),a._v(" "),s("li",[a._v("“伪目标” 并不是一个文件，只是一个标签，由于 “伪目标” 不是文件，所以 make 无法生成它的依赖关系和决定它是否要执行。")]),a._v(" "),s("li",[a._v("我们只有通过显式地指明这个 “目标” 才能让其生效。")])]),a._v(" "),s("p",[a._v("为了避免和文件重名的这种情况，我们可以使用一个特殊的标记 "),s("code",[a._v(".PHONY")]),a._v(" 来显式地指明 一个目标是 “伪目标”，向 make 说明，不管是否有这个文件，这个目标就是 “伪目标”。")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" clean\n")])])]),s("p",[a._v("只要有这个声明，不管是否有 “clean” 文件，要运行 “clean” 这个目标，只有 “make clean” 这样。 于是整个过程可以这样写：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" clean\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("clean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("RM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" *.o mytool -r\n")])])]),s("hr"),a._v(" "),s("p",[a._v("伪目标一般没有依赖的文件。但是，我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为 “默认目标”，只要将其放在第一个。一个示例就是，如果 Makefile 需要"),s("strong",[a._v("一口气生成若干个可执行文件")]),a._v("，但只想简单地敲一个 make 完事，并且，所有的目标文件都写在一个 Makefile 中，那么可以使用 “伪目标” 这个特性：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("all")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prog1 prog2 prog3\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" all\n\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("prog1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prog1.o utils.o\n\tcc -o prog1 prog1.o utils.o\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("prog2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prog2.o\n\tcc -o prog2 prog2.o\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("prog3")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prog3.o sort.o utils.o\n\tcc -o prog3 prog3.o sort.o utils.o\n")])])]),s("p",[a._v("Makefile 中的第一个目标会被作为其默认目标。我们声明了一个 "),s("code",[a._v("all")]),a._v(" 的伪目标，其依赖于其它三个目标。由于默认目标的特性是，总是被执行的，但由于“all”又是一个伪目标，伪目标只是一个标签不会生成文件，所以不会有“all”文件产生。于是，其它三个目标的规则总是会被决议。也就达到了我们一口气生成多个目标的目的。"),s("code",[a._v(".PHONY : all")]),a._v(" 声明了 “all” 这个目标为 “伪目标”。")]),a._v(" "),s("hr"),a._v(" "),s("p",[s("strong",[a._v("从上面的例子我们可以看出，目标也可以成为依赖。所以，伪目标同样也可成为依赖：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" cleanall cleanobj cleandiff\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("cleanall")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" cleanobj cleandiff\n\trm program\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("cleanobj")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\trm *.o\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("cleandiff")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\trm *.diff\n")])])]),s("p",[s("code",[a._v("make cleanall")]),a._v(" 将清除所有要被清除的文件。"),s("code",[a._v("cleanobj")]),a._v(" 和 "),s("code",[a._v("cleandiff")]),a._v(" 这两个伪目标有点像 "),s("code",[a._v("子程序")]),a._v(" 的意思。我们可以输入"),s("code",[a._v("make cleanall")]),a._v(" 和 "),s("code",[a._v("make cleanobj")]),a._v(" 和 "),s("code",[a._v("make cleandiff")]),a._v(" 命令来达到清除不同种类文件的目的。")]),a._v(" "),s("h3",{attrs:{id:"四、嵌套执行make"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、嵌套执行make"}},[a._v("#")]),a._v(" 四、嵌套执行make")]),a._v(" "),s("p",[a._v("在一些大的工程中，我们会把我们不同模块或是不同功能的源文件放在不同的目录中，我们可以在每个目录中都书写一个该目录的 Makefile，这有利于让我们的 Makefile 变得更加地简洁，而不至于把所有的东西全部写在一个 Makefile 中，这样会很难维护我们的 Makefile，这个技术对于我们模块编译和分段编译有着非常大的好处。")]),a._v(" "),s("p",[a._v("例如，我们有一个子目录叫 subdir，这个目录下有个 Makefile 文件，来指明了这个目录下文件的编译规则。那么我们总控的 Makefile 可以这样书写：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("subsystem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\tcd subdir && "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("MAKE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等价于")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("subsystem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\tcd subdir && "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("MAKE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 先进入“subdir”目录，然后执行 make 命令。")]),a._v("\n")])])]),s("p",[a._v("**我们把这个 Makefile 叫做 “总控 Makefile” **，总控 Makefile 的变量可以传递到下级的 Makefile 中（如果你显示的声明），但是不会覆盖下层的 Makefile 中所定义的变量，除非指定了 "),s("code",[a._v("-e")]),a._v(" 参数。")]),a._v(" "),s("h2",{attrs:{id:"使用变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用变量"}},[a._v("#")]),a._v(" 使用变量")]),a._v(" "),s("h3",{attrs:{id:"一、变量中的变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、变量中的变量"}},[a._v("#")]),a._v(" 一、变量中的变量")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" foo\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" bar\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" late\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等价于")]),a._v("\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" foo bar\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" later\n")])])]),s("p",[s("strong",[a._v("这种方法，前面的变量不能使用后面的变量，只能使用前面已定义好了的变量")])]),a._v(" "),s("p",[s("strong",[a._v("一个复杂的例子，其中包括了 make 的函数、条件表达式和一个系统变量“MAKELEVEL”的使用：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ifeq")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("0,"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("MAKELEVEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ncur-dir "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("shell")]),a._v(" pwd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nwhoami "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("shell")]),a._v(" whoami"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nhost-type "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("shell")]),a._v(" arch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nMAKE "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("MAKE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" host-type"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("host-type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" whoami"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("whoami"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("endif")]),a._v("\n")])])]),s("p",[s("strong",[a._v("定义一个空格：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("nullstring "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v("\nspace "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("nullstring"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# end of the line")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 注释和$(nullstring)之间有一个空格，所以space值为一个空格")]),a._v("\n\ndir "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" /foo/bar    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# directory to put the frobs in")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# dir 这个变量的值是“/foo/bar”，后面还跟了 4 个空格，如果我们这样使用这样变量来指定别的目录——“$(dir)/file”那么就完蛋了。")]),a._v("\n")])])]),s("p",[s("strong",[a._v("?= 操作符：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("FOO "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?=")]),a._v(" bar\n")])])]),s("p",[s("strong",[a._v("其含义是，如果 FOO 没有被定义过，那么变量 FOO 的值就是 “bar”，如果 FOO 先前被定义过， 那么这条语将什么也不做")]),a._v("，其等价于：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ifeq")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("origin")]),a._v(" FOO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(", undefined"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nFOO "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" bar\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("endif")]),a._v("\n")])])]),s("h3",{attrs:{id:"二、变量的高级用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、变量的高级用法"}},[a._v("#")]),a._v(" 二、变量的高级用法")]),a._v(" "),s("p",[s("strong",[a._v("1、变量值的替换：")])]),a._v(" "),s("p",[s("code",[a._v("$(var:a=b) 或是 ${var:a=b}")]),a._v(" ，其意思是，把变量 “var” 中所有以 “a” 字串结尾的 “a” 替换成 “b” 字串。")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" a.o b.o c.o\nbar "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(".o"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(".c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  $(bar) 的值就是“a.c b.c c.c”。")]),a._v("\n")])])]),s("p",[a._v("另外一种变量替换的技术是以 "),s("strong",[a._v("“静态模式”")]),a._v(" 定义的：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" a.o b.o c.o\nbar "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("%.o"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("%.c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[s("strong",[a._v("2、把变量的值再当成变量：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" y\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" z\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("hr"),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#subst 函数把“variable1”中的所有“1”字串替换成“2”字串，于是，“variable1”变成“variable2”，再取其值，所以最终，$(a) 的值就是 $(variable2) 的值——“Hello”。")]),a._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" variable1\nvariable2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" Hello\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("subst")]),a._v(" 1,2,"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nz "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" y\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 多个变量来组成一个变量的名字，然后再取其值：")]),a._v("\nfirst_second "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Hello\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" first\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" second\nall "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$a_$b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\na_objects "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" a.o b.o c.o\n1_objects "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" 1.o 2.o 3.o\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 如果 $(a1) 的值是“a”的话，那么，$(sources) 的值就是“a.c b.c c.c”；如果 $(a1)的值是“1”，那么 $(sources) 的值是“1.c 2.c 3.c”。")]),a._v("\nsources "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("_objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(".o"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(".c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h2",{attrs:{id:"使用函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用函数"}},[a._v("#")]),a._v(" 使用函数")]),a._v(" "),s("h3",{attrs:{id:"一、字符串处理函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、字符串处理函数"}},[a._v("#")]),a._v(" 一、字符串处理函数")]),a._v(" "),s("h4",{attrs:{id:"_1、subst"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、subst"}},[a._v("#")]),a._v(" 1、subst")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("subst")]),a._v(" <from>,<to>,<text>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("ul",[s("li",[a._v("名称：字符串替换函数")]),a._v(" "),s("li",[a._v("功能：把字串中的字符串替换成")]),a._v(" "),s("li",[a._v("返回：函数返回被替换过后的字符串")]),a._v(" "),s("li",[a._v("示例："),s("code",[a._v("$(subst ee,EE,feet on the street)")]),a._v(" "),s("ul",[s("li",[a._v("把 feet on the street 中的 ee 替换成 EE，返回结果是 fEEt on the strEEt 。")])])])]),a._v(" "),s("h4",{attrs:{id:"_2、patsubst"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、patsubst"}},[a._v("#")]),a._v(" 2、patsubst")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("patsubst")]),a._v(" <pattern>,<replacement>,<text>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("ul",[s("li",[a._v("名称：模式字符串替换函数")]),a._v(" "),s("li",[a._v("功能：查找"),s("code",[a._v("<text>")]),a._v("中的单词（单词以“空格”、“Tab”或“回车”“换行”分隔）是否符合模式 "),s("code",[a._v("<pattern>")]),a._v("，如果匹配的话，则以"),s("code",[a._v("<replacement>")]),a._v("替换。这里，"),s("code",[a._v("<pattern>")]),a._v(" 可以包括通配符 % ， 表示任意长度的字串。如果"),s("code",[a._v("<replacement>")]),a._v("中也包含 % ，那么，中的这个 % 将是中的那个 % 所代表的字串。（可以用 \\ 来转义，以 % 来表示真实含义的 % 字符）")]),a._v(" "),s("li",[a._v("返回：函数返回被替换过后的字符串")]),a._v(" "),s("li",[a._v("示例： "),s("code",[a._v("$(patsubst %.c,%.o,x.c.c bar.c)")]),a._v(" "),s("ul",[s("li",[a._v("把字串 x.c.c bar.c 符合模式 %.c 的单词替换成 %.o ，返回结果是 x.c.o bar.o")])])])]),a._v(" "),s("h4",{attrs:{id:"_3、strip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、strip"}},[a._v("#")]),a._v(" 3、strip")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("strip")]),a._v(" <string>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("ul",[s("li",[a._v("名称：去空格函数")]),a._v(" "),s("li",[a._v("功能：去掉"),s("code",[a._v("<string>")]),a._v("字串中开头和结尾的空字符")]),a._v(" "),s("li",[a._v("返回：返回被去掉空格的字符串值")]),a._v(" "),s("li",[a._v("示例： "),s("code",[a._v("$(strip a b c )")])])]),a._v(" "),s("h4",{attrs:{id:"_4、findstring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、findstring"}},[a._v("#")]),a._v(" 4、findstring")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("findstring")]),a._v(" <find>,<in>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("ul",[s("li",[a._v("名称：查找字符串函数")]),a._v(" "),s("li",[a._v("功能：在字串"),s("code",[a._v("<in>")]),a._v("中查找"),s("code",[a._v("<find>")]),a._v("字串。")]),a._v(" "),s("li",[a._v("返回：如果找到，那么返回"),s("code",[a._v("<find>")]),a._v("，否则返回空字符串")]),a._v(" "),s("li",[a._v("示例： "),s("code",[a._v("$(findstring a,a b c) $(findstring a,b c)")]),a._v(" "),s("ul",[s("li",[a._v("第一个函数返回 a 字符串，第二个返回空字符串")])])])]),a._v(" "),s("h4",{attrs:{id:"_5、filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、filter"}},[a._v("#")]),a._v(" 5、filter")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("filter")]),a._v(" <pattern...>,<text>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("ul",[s("li",[s("p",[a._v("名称：过滤函数")])]),a._v(" "),s("li",[s("p",[a._v("功能：以"),s("code",[a._v("<pattern>")]),a._v("模式过滤"),s("code",[a._v("<text>")]),a._v("字符串中的单词，保留符合模式"),s("code",[a._v("<pattern>")]),a._v("的单词。可以有多个模式")])]),a._v(" "),s("li",[s("p",[a._v("返回：返回符合模式"),s("code",[a._v("<pattern>")]),a._v("的字串。")])]),a._v(" "),s("li",[s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("sources "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" foo.c bar.c baz.s ugh.h\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("sources"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tcc "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("filter")]),a._v(" %.c %.s,"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("sources"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" -o foo\n")])])]),s("ul",[s("li",[s("code",[a._v("$(filter %.c %.s,$(sources))")]),a._v("返回的值是 foo.c bar.c baz.s 。")])])])]),a._v(" "),s("hr"),a._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/xiaoshuai537/article/details/79340153",target:"_blank",rel:"noopener noreferrer"}},[a._v("等等等等"),s("OutboundLink")],1)]),a._v(" "),s("ul",[s("li",[a._v("filter-out")]),a._v(" "),s("li",[a._v("sort")]),a._v(" "),s("li",[a._v("word")]),a._v(" "),s("li",[a._v("wordlist")]),a._v(" "),s("li",[a._v("words")]),a._v(" "),s("li",[a._v("firstword")])]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"二、文件名操作函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、文件名操作函数"}},[a._v("#")]),a._v(" 二、文件名操作函数")]),a._v(" "),s("ul",[s("li",[a._v("dir")]),a._v(" "),s("li",[a._v("notdir")]),a._v(" "),s("li",[a._v("suffix")]),a._v(" "),s("li",[a._v("basename")]),a._v(" "),s("li",[a._v("addsuffix")]),a._v(" "),s("li",[a._v("addprefix")]),a._v(" "),s("li",[a._v("join")])]),a._v(" "),s("h3",{attrs:{id:"三、foreach-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、foreach-函数"}},[a._v("#")]),a._v(" 三、foreach 函数")]),a._v(" "),s("p",[a._v("foreach 函数和别的函数非常的不一样。因为这个函数是用来做循环用的，Makefile 中的 foreach 函 数几乎是仿照于 Unix 标准 Shell（/bin/sh）中的 for 语句，或是 C-Shell（/bin/csh）中的 foreach 语句 而构建的。它的语法是：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("foreach")]),a._v(" <var>,<list>,<text>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("这个函数的意思是，把参数 list 中的单词逐一取出放到参数 var 所指定的变量中，然后再执 text 行所包含的表达式。每一次 text 会返回一个字符串，循环过程中， text 的所返回的每个字符串会以空格分隔，最后当整个循环结束时， 所返回的每个字符串所组成的整个字符串（以空格分隔）将会是 foreach 函数的返回值。")]),a._v(" "),s("h3",{attrs:{id:"四、call-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、call-函数"}},[a._v("#")]),a._v(" 四、call 函数")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("call")]),a._v(" <expression>,<parm1>,<parm2>,...,<parmn>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n")])])]),s("p",[a._v("当 make 执行这个函数时， "),s("code",[a._v("<expression>")]),a._v("参数中的变量，如 "),s("code",[a._v("$(1)")]),a._v(" 、"),s("code",[a._v("$(2)")]),a._v(" 等，会被参数 "),s("code",[a._v("<parm1> 、 <parm2> 、<parm3>")]),a._v(" 依次取代。而 "),s("code",[a._v("<expression>")]),a._v(" 的返回值就是 call 函数的返回值。")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("reverse "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("call")]),a._v(" reverse,a,b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("需要注意：在向 call 函数传递参数时要尤其注意空格的使用。call 函数在处理参数时，第 2 个及其之后的参数中的空格会被保留，因而可能造成一些奇怪的效果。因而在向 call 函数提供参数时，最安全的做法是去除所有多余的空格。")]),a._v(" "),s("h3",{attrs:{id:"五、origin-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、origin-函数"}},[a._v("#")]),a._v(" 五、origin 函数")]),a._v(" "),s("p",[a._v("origin 函数只是告诉这个变量是哪里来的")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("origin")]),a._v(" <variable>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("注意， "),s("code",[a._v("<variable>")]),a._v("是变量的名字，不应该是引用。所以你最好不要在 "),s("code",[a._v("<variable>")]),a._v(" 中使用 $ 字符。")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("undefined")]),a._v(" 如果 "),s("code",[a._v("<variable>")]),a._v(" 从来没有定义过，origin 函数返回这个值")]),a._v(" "),s("li",[s("strong",[a._v("undefined default")]),a._v(" 如果 "),s("code",[a._v("<variable>")]),a._v(" 是一个默认的定义，比如“CC”这个变量")]),a._v(" "),s("li",[s("strong",[a._v("environment")]),a._v(" 如果 "),s("code",[a._v("<variable>")]),a._v(" 是一个环境变量，并且当 Makefile 被执行时，-e 参数没有被打开")]),a._v(" "),s("li",[s("strong",[a._v("file")]),a._v(" 如果 "),s("code",[a._v("<variable>")]),a._v(" 这个变量被定义在 Makefile 中")]),a._v(" "),s("li",[s("strong",[a._v("command line")]),a._v(" 如果 "),s("code",[a._v("<variable>")]),a._v(" 这个变量是被命令行定义的")]),a._v(" "),s("li",[s("strong",[a._v("override")]),a._v(" 如果 "),s("code",[a._v("<variable>")]),a._v(" 是被 override 指示符重新定义的")]),a._v(" "),s("li",[s("strong",[a._v("automatic")]),a._v(" 如果 "),s("code",[a._v("<variable>")]),a._v(" 是一个命令运行中的自动化变量")])]),a._v(" "),s("h3",{attrs:{id:"六、shell-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、shell-函数"}},[a._v("#")]),a._v(" 六、shell 函数")]),a._v(" "),s("p",[a._v("shell 函数的参数是操作系统 Shell 的命令，把执行命令后的输出作为函数返回。")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("contents "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("shell")]),a._v(" cat foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nfiles "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("shell")]),a._v(" echo *.c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("注意，这个函数会新生成一个 Shell 程序来执行命令，所以要注意其运行性能，如果你的 Makefile 中有一些比较复杂的规则，并大量使用了这个函数，那么对于系统性能是有害的。特别是 Makefile 的隐晦的规则可能会让 shell 函数执行的次数比想像的多得多。")]),a._v(" "),s("h2",{attrs:{id:"makefile-的运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefile-的运行"}},[a._v("#")]),a._v(" Makefile 的运行")]),a._v(" "),s("h3",{attrs:{id:"_1、make-的退出码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、make-的退出码"}},[a._v("#")]),a._v(" 1、make 的退出码")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("0")]),a._v(" 表示成功执行")]),a._v(" "),s("li",[s("strong",[a._v("1")]),a._v(" 如果 make 运行时出现任何错误，其返回 1。")]),a._v(" "),s("li",[s("strong",[a._v("2")]),a._v(" 如果使用了 make 的“-q”选项，并且 make 使得一些目标不需要更新，那么返回 2。")])]),a._v(" "),s("h3",{attrs:{id:"_2、指定-makefile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、指定-makefile"}},[a._v("#")]),a._v(" 2、指定 Makefile")]),a._v(" "),s("p",[a._v("GNU make 找寻默认的 Makefile 的规则是在当前目录下依次找三个文件：")]),a._v(" "),s("ul",[s("li",[a._v("GNU-makefile")]),a._v(" "),s("li",[a._v("makefile")]),a._v(" "),s("li",[a._v("Makefile")])]),a._v(" "),s("p",[a._v("我们也可以给 make 命令指定一个特殊名字的 Makefile。要达到这个功能，我们要使用 make 的 -f 或是 --file 参数（--makefile 参数也行）。例如，我们有个 makefile 的名字是“hchen.mk”，那么，我们可以这样来让 make 来执行这个文件：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("make –f hchen.mk\n")])])]),s("h3",{attrs:{id:"_3、指定目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、指定目标"}},[a._v("#")]),a._v(" 3、指定目标")]),a._v(" "),s("p",[a._v("一般来说，make 的最终目标是 makefile 中的第一个目标，而其它目标一般是由这个目标连带出来的。这是 make 的默认行为。")]),a._v(" "),s("p",[a._v("可以指示 make，让其完成所指定的目标。在 make 命令后直接跟目标的名字就可以完成：如 "),s("code",[a._v("make clean")])]),a._v(" "),s("p",[a._v("有一个 make 的环境变量叫 "),s("code",[a._v("MAKECMDGOALS")]),a._v("，这个变量中会存放所指定的终极目标的列表，如果在命令行上没有指定目标，那么，这个变量是空值。这个变量可以使用在一些比较特殊的情形 下。比如：")]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[a._v("sources "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" foo.c bar.c\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ifneq")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("MAKECMDGOALS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(",clean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("\tinclude "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$")]),a._v("(sources")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(".c"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(".d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("endif")]),a._v("\n")])])]),s("p",[s("strong",[a._v("使用指定终极目标的方法可以很方便地让我们编译我们的程序：")])]),a._v(" "),s("div",{staticClass:"language-makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v(".PHONY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" all\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[a._v("all")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" prog1 prog2 prog3 prog4\n")])])]),s("p",[s("strong",[a._v("我们可以使用“make all”命令来编译所有的目标，如果把 all 置成第一个目标，那么只需执行“make”")])]),a._v(" "),s("p",[a._v("即然 make 可以指定所有 makefile 中的目标，那么也包括“伪目标”，于是我们可以根据这种性质来让我们的 makefile 根据指定的不同的目标来完成不同的事。")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("all")]),a._v(": 这个伪目标是所有目标的目标，其功能一般是编译所有的目标")]),a._v(" "),s("li",[s("strong",[a._v("clean")]),a._v(": 这个伪目标功能是删除所有被 make 创建的文件")]),a._v(" "),s("li",[s("strong",[a._v("install")]),a._v(": 这个伪目标功能是安装已编译好的程序，其实就是把目标执行文件拷贝到指定的目标中去")]),a._v(" "),s("li",[s("strong",[a._v("print")]),a._v(": 这个伪目标的功能是例出改变过的源文件")]),a._v(" "),s("li",[s("strong",[a._v("tar")]),a._v(": 这个伪目标功能是把源程序打包备份。也就是一个 tar 文件")]),a._v(" "),s("li",[s("strong",[a._v("dist")]),a._v(": 这个伪目标功能是创建一个压缩文件，一般是把 tar 文件压成 Z 文件或是 gz 文件")]),a._v(" "),s("li",[s("strong",[a._v("TAGS")]),a._v(": 这个伪目标功能是更新所有的目标，以备完整地重编译使用")]),a._v(" "),s("li",[s("strong",[a._v("check 和 test")]),a._v(": 这两个伪目标一般用来测试 makefile 的流程")])]),a._v(" "),s("h3",{attrs:{id:"_4、检查规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、检查规则"}},[a._v("#")]),a._v(" 4、检查规则")]),a._v(" "),s("p",[a._v("有时候，我们不想让我们的 makefile 中的规则执行起来，我们只想检查一下我们的命令，或是执行的序列。于是我们可以使用 make 命令的下述参数：")]),a._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/image-20210730101415701.png",alt:"image-20210730101415701"}}),a._v(" "),s("h3",{attrs:{id:"_5、make-的参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、make-的参数"}},[a._v("#")]),a._v(" 5、make 的参数")]),a._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/image-20210730101603552.png",alt:"image-20210730101603552"}}),a._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/image-20210730101712843.png",alt:"image-20210730101712843"}}),a._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/image-20210730101735095.png",alt:"image-20210730101735095"}}),a._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/image-20210730101756318.png",alt:"image-20210730101756318"}})])}),[],!1,null,null,null);t.default=n.exports}}]);