(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{530:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("https://gitee.com/huyi612/hm-dianping")]),t._v(" "),a("h2",{attrs:{id:"redis安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis安装"}},[t._v("#")]),t._v(" Redis安装")]),t._v(" "),a("p",[a("strong",[t._v("准备工作：下载安装最新版的gcc编译器")])]),t._v(" "),a("p",[t._v("安装C 语言的编译环境")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("yum")]),t._v(" "),a("strong",[t._v("install centos-release-scl scl-utils-build")])]),t._v(" "),a("li",[a("strong",[t._v("yum install -y devtoolset-8-toolchain")])]),t._v(" "),a("li",[a("strong",[t._v("scl enable devtoolset-8 bash")])])]),t._v(" "),a("p",[a("strong",[t._v("测试")]),t._v(" "),a("strong",[t._v("gcc版本")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("gcc --version")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201312617.png",alt:"image-20211220131210046"}})]),t._v(" "),a("p",[a("strong",[t._v("下载redis-6.2.1.tar.gz放/opt目录")])]),t._v(" "),a("p",[a("strong",[t._v("解压命令：tar -zxvf redis-6.2.1.tar.gz")])]),t._v(" "),a("p",[a("strong",[t._v("解压完成后进入目录：cd redis-6.2.1")])]),t._v(" "),a("p",[a("strong",[t._v("在redis-6.2.1目录下再次执行make命令（只是编译好）")])]),t._v(" "),a("p",[a("strong",[t._v("如果没有准备好C语言编译环境，make会报错—Jemalloc/jemalloc.h：没有那个文件")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201312491.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("解决方案：运行make distclean")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201312640.png",alt:"image-20211220131254622"}})]),t._v(" "),a("p",[a("strong",[t._v("在redis-6.2.1目录下再次执行make命令（只是编译好）")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201313069.png",alt:"image-20211220131303931"}})]),t._v(" "),a("p",[a("strong",[t._v("跳过make test 继续执行: make install")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201313267.png",alt:"image-20211220131312973"}})]),t._v(" "),a("p",[t._v("**安装目录：**usr/local/bin")]),t._v(" "),a("p",[t._v("查看默认安装目录：")]),t._v(" "),a("ul",[a("li",[t._v("redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何")]),t._v(" "),a("li",[t._v("redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲")]),t._v(" "),a("li",[t._v("redis-check-dump：修复有问题的dump.rdb文件")]),t._v(" "),a("li",[t._v("redis-sentinel：Redis集群使用")]),t._v(" "),a("li",[t._v("redis-server：Redis服务器启动命令")]),t._v(" "),a("li",[t._v("redis-cli：客户端，操作入口")])]),t._v(" "),a("p",[a("strong",[t._v("前台启动（不推荐）")])]),t._v(" "),a("p",[t._v("前台启动，命令行窗口不能关闭，否则服务器停止")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201313641.png",alt:"image-20211220131325899"}})]),t._v(" "),a("p",[a("strong",[t._v("后台启动（推荐）")])]),t._v(" "),a("p",[a("strong",[t._v("备份redis.conf")])]),t._v(" "),a("p",[t._v("拷贝一份redis.conf到其他目录")]),t._v(" "),a("p",[t._v("cp  /opt/redis-3.2.5/redis.conf  /myredis")]),t._v(" "),a("p",[a("strong",[t._v("后台启动设置daemonize no改成yes")])]),t._v(" "),a("p",[t._v("修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动")]),t._v(" "),a("p",[a("strong",[t._v("Redis启动")])]),t._v(" "),a("ul",[a("li",[t._v("redis-server /myredis/redis.conf")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201313291.png",alt:"image-20211220131338102"}})]),t._v(" "),a("p",[a("strong",[t._v("用客户端访问：redis-cli")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201313945.png",alt:"image-20211220131344744"}})]),t._v(" "),a("p",[a("strong",[t._v("多个端口可以：redis-cli -p6379")])]),t._v(" "),a("p",[a("strong",[t._v("测试验证：")]),t._v(" "),a("strong",[t._v("ping")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201313546.png",alt:"image-20211220131355089"}})]),t._v(" "),a("p",[a("strong",[t._v("Redis关闭")])]),t._v(" "),a("ul",[a("li",[t._v("单实例关闭：redis-cli shutdown")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201314719.png",alt:"image-20211220131402705"}})]),t._v(" "),a("ul",[a("li",[t._v("也可以进入终端后再关闭")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201314787.png",alt:"image-20211220131408713"}})]),t._v(" "),a("p",[t._v("多实例关闭，指定端口关闭：redis-cli -p 6379 shutdown")]),t._v(" "),a("h2",{attrs:{id:"常用五大数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用五大数据类型"}},[t._v("#")]),t._v(" 常用五大数据类型")]),t._v(" "),a("h3",{attrs:{id:"一、redis-键-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、redis-键-key"}},[t._v("#")]),t._v(" 一、Redis 键（key）")]),t._v(" "),a("p",[t._v("*"),a("em",[t._v("keys "),a("em",[t._v("：")])]),t._v(" 查看当前库所有key   (匹配：keys *1)")]),t._v(" "),a("p",[a("strong",[t._v("exists key：")]),t._v(" 判断某个key是否存在")]),t._v(" "),a("p",[a("strong",[t._v("type key：")]),t._v(" 查看你的key是什么类型")]),t._v(" "),a("p",[a("strong",[t._v("del key：")]),t._v(" 删除指定的key数据")]),t._v(" "),a("p",[a("strong",[t._v("unlink key：")]),t._v(" 根据value选择非阻塞删除")]),t._v(" "),a("ul",[a("li",[t._v("仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。")])]),t._v(" "),a("p",[a("strong",[t._v("expire key 10：")]),t._v(" 为给定的key设置10秒过期时间")]),t._v(" "),a("p",[a("strong",[t._v("ttl key：")]),t._v(" 查看还有多少秒过期，"),a("strong",[t._v("-1表示永不过期，-2表示已过期")])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("select：")]),t._v(" 命令切换数据库")]),t._v(" "),a("p",[a("strong",[t._v("dbsize：")]),t._v(" 查看当前数据库的key的数量")]),t._v(" "),a("p",[a("strong",[t._v("flushdb：")]),t._v(" 清空当前库")]),t._v(" "),a("p",[a("strong",[t._v("flushall：")]),t._v(" 通杀全部库")]),t._v(" "),a("h3",{attrs:{id:"二、redis字符串-tring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、redis字符串-tring"}},[t._v("#")]),t._v(" 二、Redis字符串（tring）")]),t._v(" "),a("p",[t._v("String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。")]),t._v(" "),a("p",[t._v("String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M")]),t._v(" "),a("p",[t._v("**set "),a("code",[t._v("<key><value>")]),t._v(" **添加键值对")]),t._v(" "),a("ul",[a("li",[t._v("NX：当数据库中key不存在时，可以将key-value添加数据库")]),t._v(" "),a("li",[t._v("XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥")]),t._v(" "),a("li",[t._v("EX：key的超时秒数")]),t._v(" "),a("li",[t._v("PX：key的超时毫秒数，与EX互斥")])]),t._v(" "),a("p",[t._v("**get  "),a("code",[t._v("<key>")]),t._v("**查询对应键值")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("**append  "),a("code",[t._v("<key><value>")]),t._v("**将给定的"),a("code",[t._v("<value>")]),t._v(" 追加到原值的末尾")]),t._v(" "),a("p",[a("strong",[t._v("strlen  "),a("code",[t._v("<key>")])]),t._v(" 获得值的长度")]),t._v(" "),a("p",[t._v("**setnx  "),a("code",[t._v("<key><value>")]),t._v("**只有在 key 不存在时   设置 key 的值")]),t._v(" "),a("p",[a("strong",[t._v("incr "),a("code",[t._v("<key>")])]),t._v(" 将 key 中储存的数字值增1")]),t._v(" "),a("ul",[a("li",[t._v("只能对数字值操作，如果为空，新增值为1")])]),t._v(" "),a("p",[t._v("**decr  "),a("code",[t._v("<key>")]),t._v("**将 key 中储存的数字值减1")]),t._v(" "),a("ul",[a("li",[t._v("只能对数字值操作，如果为空，新增值为-1")])]),t._v(" "),a("p",[t._v("**incrby / decrby  "),a("code",[t._v("<key><步长>")]),t._v("**将 key 中储存的数字值增减。自定义步长。")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("mset  "),a("code",[t._v("<key1><value1><key2><value2>")])]),t._v("  .....")]),t._v(" "),a("ul",[a("li",[t._v("同时设置一个或多个 key-value对")])]),t._v(" "),a("p",[a("strong",[t._v("mget  "),a("code",[t._v("<key1><key2><key3>")])]),t._v(" .....")]),t._v(" "),a("ul",[a("li",[t._v("同时获取一个或多个 value")])]),t._v(" "),a("p",[a("strong",[t._v("msetnx "),a("code",[t._v("<key1><value1><key2><value2>")])]),t._v("  .....")]),t._v(" "),a("ul",[a("li",[t._v("同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。")]),t._v(" "),a("li",[a("strong",[t._v("原子性，有一个失败则都失败")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("getrange  "),a("code",[t._v("<key><起始位置><结束位置>")])])]),t._v(" "),a("ul",[a("li",[t._v("获得值的范围，类似java中的substring，"),a("strong",[t._v("前包，后包")])])]),t._v(" "),a("p",[a("strong",[t._v("setrange "),a("code",[t._v("<key><起始位置><value>")])])]),t._v(" "),a("ul",[a("li",[t._v("用 "),a("code",[t._v("<value>")]),t._v("  覆写"),a("code",[t._v("<key>")]),t._v("所储存的字符串值，从<起始位置>开始("),a("em",[t._v("索引从0开始")]),t._v(")。")])]),t._v(" "),a("p",[a("strong",[t._v("setex  "),a("code",[t._v("<key><过期时间><value>")])])]),t._v(" "),a("ul",[a("li",[t._v("设置键值的同时，设置过期时间，单位秒。")])]),t._v(" "),a("p",[t._v("getset "),a("code",[t._v("<key><value>")])]),t._v(" "),a("ul",[a("li",[t._v("以新换旧，设置了新值同时获得旧值。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.")])]),t._v(" "),a("p",[t._v("![img](file:///C:\\Users\\INTELL~1\\AppData\\Local\\Temp\\ksohtml\\wps36AA.tmp.jpg)")]),t._v(" "),a("p",[t._v("如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。")]),t._v(" "),a("h3",{attrs:{id:"三、redis-列表-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、redis-列表-list"}},[t._v("#")]),t._v(" 三、Redis 列表（List）")]),t._v(" "),a("p",[a("strong",[t._v("单键多值")])]),t._v(" "),a("p",[t._v("Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）。")]),t._v(" "),a("p",[t._v("它的"),a("strong",[t._v("底层实际是个双向链表")]),t._v("，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201316744.png",alt:"image-20211220131618523"}})]),t._v(" "),a("p",[a("strong",[t._v("lpush/rpush  "),a("code",[t._v("<key><value1><value2><value3>")]),t._v(" ....")]),t._v(" 从左边/右边插入一个或多个值。")]),t._v(" "),a("p",[t._v("**lpop/rpop  "),a("code",[t._v("<key>")]),t._v("**从左边/右边吐出一个值。值在键在，值光键亡。")]),t._v(" "),a("p",[t._v("**rpoplpush  "),a("code",[t._v("<key1><key2>")]),t._v("**从"),a("code",[t._v("<key1>")]),t._v("列表右边吐出一个值，插到"),a("key2",[t._v("列表左边。")])],1),t._v(" "),a("p",[a("strong",[t._v("lrange "),a("code",[t._v("<key><start><stop>")])])]),t._v(" "),a("ul",[a("li",[t._v("按照索引下标获得元素(从左到右)")])]),t._v(" "),a("p",[a("strong",[t._v("lrange mylist 0 -1")]),t._v("  0左边第一个，-1右边第一个，（0-1表示获取所有）")]),t._v(" "),a("p",[t._v("**lindex "),a("code",[t._v("<key><index>")]),t._v("**按照索引下标获得元素(从左到右)")]),t._v(" "),a("p",[t._v("**llen"),a("code",[t._v("<key>")]),t._v("**获得列表长度")]),t._v(" "),a("p",[t._v("**linsert "),a("code",[t._v("<key> before <value><newvalue>")]),t._v("**在"),a("code",[t._v("<value>")]),t._v("的前面插入"),a("code",[t._v("<newvalue>")]),t._v("插入值")]),t._v(" "),a("p",[t._v("**lrem "),a("code",[t._v("<key><n><value>")]),t._v("**从左边删除n个value(从左到右)")]),t._v(" "),a("p",[t._v("**lset"),a("code",[t._v("<key><index><value>")]),t._v("**将列表key下标为index的值替换成value")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("List的数据结构为快速链表quickList。")])]),t._v(" "),a("p",[t._v("首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。")]),t._v(" "),a("p",[t._v("它将所有的元素紧挨着一起存储，分配的是一块连续的内存。")]),t._v(" "),a("p",[t._v("当数据量比较多的时候才会改成quicklist。")]),t._v(" "),a("p",[t._v("因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。")]),t._v(" "),a("p",[a("img",{attrs:{src:"E:/Typora%E5%9B%BE%E7%89%87/image-20211220131629808.png",alt:"image-20211220131629808"}})]),t._v(" "),a("p",[t._v("Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。")]),t._v(" "),a("h3",{attrs:{id:"四、redis-集合-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、redis-集合-set"}},[t._v("#")]),t._v(" 四、Redis 集合（Set）")]),t._v(" "),a("p",[t._v("Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以"),a("strong",[t._v("自动排重")]),t._v("的，当需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。")]),t._v(" "),a("p",[t._v("Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的"),a("strong",[t._v("复杂度都是O(1)")]),t._v("。")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("sadd "),a("code",[t._v("<key><value1><value2>")]),t._v(" .....")])]),t._v(" "),a("p",[t._v("将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略")]),t._v(" "),a("p",[t._v("**smembers "),a("code",[t._v("<key>")]),t._v("**取出该集合的所有值。")]),t._v(" "),a("p",[t._v("**sismember "),a("code",[t._v("<key><value>")]),t._v("**判断集合"),a("code",[t._v("<key>")]),t._v("是否为含有该"),a("code",[t._v("<value>")]),t._v("值，有1，没有0")]),t._v(" "),a("p",[t._v("**scard"),a("code",[t._v("<key>")]),t._v("**返回该集合的元素个数。")]),t._v(" "),a("p",[a("strong",[t._v("srem "),a("code",[t._v("<key><value1><value2>")])]),t._v(" .... 删除集合中的某个元素。")]),t._v(" "),a("p",[a("strong",[t._v("spop "),a("code",[t._v("<key>")]),t._v("随机从该集合中吐出一个值。")])]),t._v(" "),a("p",[t._v("**srandmember "),a("code",[t._v("<key><n>")]),t._v("**随机从该集合中取出n个值。不会从集合中删除 。")]),t._v(" "),a("p",[a("strong",[t._v("smove "),a("code",[t._v("<source><destination>")]),t._v("value")]),t._v("把集合中一个值从一个集合移动到另一个集合")]),t._v(" "),a("p",[a("strong",[t._v("sinter "),a("code",[t._v("<key1><key2>")]),a("strong",[t._v("返回两个集合的")]),t._v("交集")]),t._v("元素。")]),t._v(" "),a("p",[a("strong",[t._v("sunion "),a("code",[t._v("<key1><key2>")]),a("strong",[t._v("返回两个集合的")]),t._v("并集")]),t._v("元素。")]),t._v(" "),a("p",[a("strong",[t._v("sdiff"),a("code",[t._v("<key1><key2>")]),a("strong",[t._v("返回两个集合的")]),t._v("差集")]),t._v("元素(key1中的，不包含key2中的)")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Set数据结构是dict字典，字典是用哈希表实现的。")]),t._v(" "),a("p",[t._v("Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。")]),t._v(" "),a("h3",{attrs:{id:"五、redis-哈希-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、redis-哈希-hash"}},[t._v("#")]),t._v(" 五、Redis 哈希（Hash）")]),t._v(" "),a("p",[t._v("Redis hash 是一个键值对集合。")]),t._v(" "),a("p",[t._v("Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。")]),t._v(" "),a("p",[t._v("类似Java里面的Map<String,Object>")]),t._v(" "),a("p",[t._v("用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储")]),t._v(" "),a("p",[t._v("主要有以下2种存储方式：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201318310.png",alt:"image-20211220131847110"}}),a("br"),t._v("每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大。")]),t._v(" "),a("th",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201319661.png",alt:"image-20211220131902732"}}),a("br"),t._v("用户ID数据冗余")])])]),t._v(" "),a("tbody")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201320627.png",alt:"image-20211220132006580"}})]),t._v(" "),a("p",[t._v("通过**key(用户ID) + field(属性标签)**就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("**hset "),a("code",[t._v("<key><field><value>")]),t._v("**给"),a("key",[t._v("集合中的  "),a("code",[t._v("<field>")]),t._v("键赋值"),a("code",[t._v("<value>")])])],1),t._v(" "),a("p",[t._v("**hget "),a("code",[t._v("<key1><field>")]),t._v("从"),a("code",[t._v("<key1>")]),t._v("**集合"),a("code",[t._v("<field>")]),t._v("取出 value")]),t._v(" "),a("p",[a("strong",[t._v("hmset "),a("code",[t._v("<key1><field1><value1><field2><value2>")]),t._v("...")]),t._v(" 批量设置hash的值")]),t._v(" "),a("p",[t._v("**hexists"),a("code",[t._v("<key1><field>")]),t._v("**查看哈希表 key 中，给定域 field 是否存在。")]),t._v(" "),a("p",[t._v("**hkeys "),a("code",[t._v("<key>")]),t._v("**列出该hash集合的所有field")]),t._v(" "),a("p",[t._v("**hvals "),a("code",[t._v("<key>")]),t._v("**列出该hash集合的所有value")]),t._v(" "),a("p",[t._v("**hincrby "),a("code",[t._v("<key><field><increment>")]),t._v("**为哈希表 key 中的域 field 的值加上增量 1  -1")]),t._v(" "),a("p",[t._v("**hsetnx "),a("code",[t._v("<key><field><value>")]),t._v("**将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。")]),t._v(" "),a("h3",{attrs:{id:"六、redis有序集合-zset-sorted-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、redis有序集合-zset-sorted-set"}},[t._v("#")]),t._v(" 六、Redis有序集合（Zset - sorted set）")]),t._v(" "),a("p",[t._v("Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。")]),t._v(" "),a("p",[t._v("不同之处是有序集合的每个成员都关联了一个"),a("strong",[t._v("评分（score）")]),t._v(",这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。"),a("strong",[t._v("集合的成员是唯一的，但是评分可以是重复了 。")])]),t._v(" "),a("p",[t._v("因为元素是有序的, 所以也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。")]),t._v(" "),a("p",[t._v("访问有序集合的中间元素也是非常快的,因此能够使用有序集合作为一个没有重复成员的智能列表。")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("zadd  "),a("code",[t._v("<key><score1><value1><score2><value2>")]),t._v("…")])]),t._v(" "),a("ul",[a("li",[t._v("将一个或多个 member 元素及其 score 值加入到有序集 key 当中。")])]),t._v(" "),a("p",[a("strong",[t._v("zrange "),a("code",[t._v("<key><start><stop>")]),t._v("  [WITHSCORES]")])]),t._v(" "),a("ul",[a("li",[t._v("返回有序集 key 中，下标在"),a("code",[t._v("<start><stop>")]),t._v("之间的元素")]),t._v(" "),a("li",[t._v("带WITHSCORES，可以让分数一起和值返回到结果集。")])]),t._v(" "),a("p",[a("strong",[t._v("zrangebyscore key minmax [withscores] [limit offset count]")])]),t._v(" "),a("ul",[a("li",[t._v("返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。")])]),t._v(" "),a("p",[a("strong",[t._v("zrevrangebyscore key maxmin [withscores] [limit offset count]")])]),t._v(" "),a("ul",[a("li",[t._v("同上，改为从大到小排列。")])]),t._v(" "),a("p",[a("strong",[t._v("zincrby "),a("code",[t._v("<key><increment><value>")])]),t._v("  为元素的score加上增量")]),t._v(" "),a("p",[t._v("**zrem  "),a("code",[t._v("<key><value>")]),t._v("**删除该集合下，指定值的元素")]),t._v(" "),a("p",[t._v("**zcount "),a("code",[t._v("<key><min><max>")]),t._v("**统计该集合，分数区间内的元素个数")]),t._v(" "),a("p",[t._v("**zrank "),a("code",[t._v("<key><value>")]),t._v("**返回该值在集合中的排名，从0开始。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("案例：如何利用zset实现一个文章访问量的排行榜？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201320959.png",alt:"image-20211220132032169"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map<String, Double>，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。")]),t._v(" "),a("p",[t._v("zset底层使用了两个数据结构")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("hash")]),t._v("，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。")]),t._v(" "),a("li",[a("strong",[t._v("跳跃表")]),t._v("，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。")])]),t._v(" "),a("h3",{attrs:{id:"七、跳跃表-跳表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、跳跃表-跳表"}},[t._v("#")]),t._v(" 七、"),a("strong",[t._v("跳跃表（跳表）")])]),t._v(" "),a("p",[t._v("平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。")]),t._v(" "),a("p",[a("strong",[t._v("实例")])]),t._v(" "),a("p",[t._v("对比有序链表和跳跃表，从链表中查询出51")]),t._v(" "),a("ul",[a("li",[t._v("有序链表")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201320217.png",alt:"image-20211220132044126"}})]),t._v(" "),a("p",[t._v("要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。")]),t._v(" "),a("ul",[a("li",[t._v("跳跃表")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202112201320872.png",alt:"image-20211220132050641"}})]),t._v(" "),a("p",[t._v("从第2层开始，1节点比51节点小，向后比较。")]),t._v(" "),a("p",[t._v("21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层")]),t._v(" "),a("p",[t._v("在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下")]),t._v(" "),a("p",[t._v("在第0层，51节点为要查找的节点，节点被找到，共查找4次。")]),t._v(" "),a("p",[t._v("从此可以看出跳跃表比有序链表效率要高")]),t._v(" "),a("h2",{attrs:{id:"bitmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitmap"}},[t._v("#")]),t._v(" BitMap")]),t._v(" "),a("p",[a("strong",[t._v("Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是2^32个bit位。")])]),t._v(" "),a("p",[t._v("BitMap的操作命令有：")]),t._v(" "),a("ul",[a("li",[t._v("SETBIT：向指定位置（offset）存入一个0或1GETBIT：获取指定位置（offset）的bit值")]),t._v(" "),a("li",[t._v("BITCOUNT：统计BitMap中值为1的bit位的数量")]),t._v(" "),a("li",[t._v("BITFIELD：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值")]),t._v(" "),a("li",[t._v("BITFIELD_RO：获取BitMap中bit数组，并以十进制形式返回")]),t._v(" "),a("li",[t._v("BITOP：将多个BitMap的结果做位运算（与、或、异或）")]),t._v(" "),a("li",[t._v("BITPOS：查找bit数组中指定范围内第一个0或1出现的位置")])]),t._v(" "),a("h2",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),a("h3",{attrs:{id:"缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[t._v("#")]),t._v(" 缓存穿透")]),t._v(" "),a("p",[t._v("缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。")]),t._v(" "),a("p",[t._v("大量线程并发请求不存在的数据，使得请求全部进入数据库，可能搞垮数据库。")]),t._v(" "),a("p",[a("strong",[t._v("解决方案：")])]),t._v(" "),a("p",[a("strong",[t._v("1、缓存空对象")])]),t._v(" "),a("ul",[a("li",[t._v("优点：实现简单，维护方便")]),t._v(" "),a("li",[t._v("缺点：\n"),a("ul",[a("li",[t._v("额外的内存消耗")]),t._v(" "),a("li",[t._v("可能造成短期的不一致")])])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204281437236.png",alt:"image-20220428143715229"}})])]),t._v(" "),a("p",[a("strong",[t._v("2、布隆过滤")])]),t._v(" "),a("ul",[a("li",[t._v("优点：内存占用较少，没有多余key")]),t._v(" "),a("li",[t._v("缺点：\n"),a("ul",[a("li",[t._v("实现复杂")]),t._v(" "),a("li",[t._v("存在误判")])])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204281437417.png",alt:"image-20220428143751858"}})])]),t._v(" "),a("p",[a("strong",[t._v("3、其他解决方案")])]),t._v(" "),a("ul",[a("li",[t._v("增强id的复杂度，避免被猜测id规律")]),t._v(" "),a("li",[t._v("做好数据的基础格式校验")]),t._v(" "),a("li",[t._v("加强用户权限校验")]),t._v(" "),a("li",[t._v("做好热点参数的限流")])]),t._v(" "),a("h3",{attrs:{id:"缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[t._v("#")]),t._v(" 缓存雪崩")]),t._v(" "),a("p",[t._v("缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务启机，导致大量请求到达数据库，带来巨大压力。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204281433460.png",alt:"image-20220428143334259"}}),t._v(" "),a("p",[a("strong",[t._v("解决方案：")])]),t._v(" "),a("ul",[a("li",[t._v("给不同的Key的TTL添加随机值")]),t._v(" "),a("li",[t._v("利用Redis集群提高服务的可用性")]),t._v(" "),a("li",[t._v("给缓存业务添加降级限流策略")]),t._v(" "),a("li",[t._v("给业务添加多级缓存")])]),t._v(" "),a("h3",{attrs:{id:"缓存击穿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[t._v("#")]),t._v(" 缓存击穿")]),t._v(" "),a("p",[t._v("缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204281447480.png",alt:"image-20220428144727813"}}),t._v(" "),a("p",[a("strong",[t._v("解决方案：")])]),t._v(" "),a("p",[a("strong",[t._v("1、互斥锁")])]),t._v(" "),a("p",[t._v("问题：大量线程阻塞、等待")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204281448386.png",alt:"image-20220428144848828"}}),t._v(" "),a("p",[a("strong",[t._v("2、逻辑过期")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204281451775.png",alt:"image-20220428145146912"}}),t._v(" "),a("p",[a("strong",[t._v("对比：")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204281452842.png",alt:"image-20220428145216509"}}),t._v(" "),a("h4",{attrs:{id:"实现互斥锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现互斥锁"}},[t._v("#")]),t._v(" 实现互斥锁")]),t._v(" "),a("p",[t._v("redis 的 "),a("code",[t._v("setnx key value")]),t._v(" 命令，仅当 key 存在时才能成功，返回1，否则失败，返回 0")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("truLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),t._v(" flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stringRedisTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("opsForValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setIfAbsent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BooleanUtil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isTrue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    stringRedisTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),a("h3",{attrs:{id:"全局唯一id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局唯一id"}},[t._v("#")]),t._v(" 全局唯一ID")]),t._v(" "),a("p",[t._v("一般需要满足以下特性：")]),t._v(" "),a("ul",[a("li",[t._v("唯一性")]),t._v(" "),a("li",[t._v("高可用")]),t._v(" "),a("li",[t._v("高性能")]),t._v(" "),a("li",[t._v("递增性")]),t._v(" "),a("li",[t._v("安全性")])]),t._v(" "),a("h4",{attrs:{id:"全局id生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局id生成器"}},[t._v("#")]),t._v(" 全局ID生成器")]),t._v(" "),a("p",[a("strong",[t._v("为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204290057439.png",alt:"image-20220429005728598"}})]),t._v(" "),a("p",[t._v("组成：")]),t._v(" "),a("ul",[a("li",[t._v("符号位：1bit，永远为 0")]),t._v(" "),a("li",[t._v("时间戳：21bit，以秒为单位，可以使用 69 年")]),t._v(" "),a("li",[t._v("序列号，32bit，秒内的计数器，支持每秒产生 $2^{32}$ 个不同ID")])]),t._v(" "),a("h3",{attrs:{id:"秒杀业务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#秒杀业务"}},[t._v("#")]),t._v(" 秒杀业务")]),t._v(" "),a("p",[t._v("下单时需要判断两点：")]),t._v(" "),a("ul",[a("li",[t._v("秒杀是否开始或结束，如果尚未开始或已经结束则无法下单")]),t._v(" "),a("li",[t._v("库存是否充足，不足则无法下单")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204290102343.png",alt:"image-20220429010034893"}}),t._v(" "),a("h3",{attrs:{id:"超卖问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#超卖问题"}},[t._v("#")]),t._v(" 超卖问题")]),t._v(" "),a("p",[a("strong",[t._v("超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：")])]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204290102243.png",alt:"image-20220429010235408"}}),t._v(" "),a("h4",{attrs:{id:"乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁"}},[t._v("#")]),t._v(" 乐观锁")]),t._v(" "),a("h5",{attrs:{id:"版本号法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本号法"}},[t._v("#")]),t._v(" 版本号法")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/7cb2d56788634486bcbdde56678c4a63-image-20220429010418891.png",alt:"image-20220429010418891"}}),t._v(" "),a("h5",{attrs:{id:"cas-法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cas-法"}},[t._v("#")]),t._v(" CAS 法")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/49db6f4ca5cf46df8ab545bd15d73042-image-20220429010528363.png",alt:"image-20220429010528363"}}),t._v(" "),a("p",[t._v("对比：")]),t._v(" "),a("ul",[a("li",[t._v("悲观锁：添加同步锁，让线程串行执行优点：简单粗暴缺点：性能一般")]),t._v(" "),a("li",[t._v("乐观锁：不加锁，在更新时判断是否有其它线程在修改\n"),a("ul",[a("li",[t._v("优点：性能好")]),t._v(" "),a("li",[t._v("缺点：存在成功率低的问题（通过库存余量是否大于零控制）")])])])]),t._v(" "),a("h3",{attrs:{id:"一人一单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一人一单"}},[t._v("#")]),t._v(" 一人一单")]),t._v(" "),a("p",[a("strong",[t._v("需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291131370.png",alt:"image-20220429113051843"}}),t._v(" "),a("p",[t._v("先查询订单，再判断用户订单是否存在，还是会出现线程问题。新增数据无法使用乐观锁，因此给查询、判断、新增都加上悲观锁。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291134226.png",alt:"image-20220429113414723"}}),t._v(" "),a("p",[t._v("在集群模式下，synchronized 就不起作用了，因为它只在一个 JVM 实例中，不同服务会有不同的 JVM 实例。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291136962.png",alt:"image-20220429113638677"}}),t._v(" "),a("h3",{attrs:{id:"分布式锁-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁-2"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291137853.png",alt:"image-20220429113743598"}}),t._v(" "),a("p",[t._v("分布式锁：满足分布式系统或集群模式下多进程可见并互斥的锁")]),t._v(" "),a("ul",[a("li",[t._v("多进程可见")]),t._v(" "),a("li",[t._v("互斥")]),t._v(" "),a("li",[t._v("高可用")]),t._v(" "),a("li",[t._v("高性能")]),t._v(" "),a("li",[t._v("安全性")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291139181.png",alt:"image-20220429113944588"}}),t._v(" "),a("h4",{attrs:{id:"实现分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现分布式锁"}},[t._v("#")]),t._v(" 实现分布式锁")]),t._v(" "),a("p",[a("strong",[t._v("获取锁")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("互斥：确保只有一个线程能获取锁")]),t._v(" "),a("p",[a("code",[t._v("SETNX lock thread1")])]),t._v(" "),a("p",[a("code",[t._v("EXPIRE lock 10")])])]),t._v(" "),a("li",[a("p",[t._v("非阻塞：尝试一次，成功返回 true，失败返回 false")])])]),t._v(" "),a("p",[a("strong",[t._v("获取锁，和添加过期时间必须保证原子性，因此修改为一个命令：")])]),t._v(" "),a("p",[a("code",[t._v("SET lock thread1 NX EX 10")])]),t._v(" "),a("p",[a("strong",[t._v("释放锁")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("手动释放")])]),t._v(" "),a("li",[a("p",[t._v("超时释放：获取锁时添加一个超时时间")]),t._v(" "),a("p",[a("code",[t._v("DEL key")])])])]),t._v(" "),a("h4",{attrs:{id:"误删问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#误删问题"}},[t._v("#")]),t._v(" 误删问题")]),t._v(" "),a("p",[a("strong",[t._v("线程一获取锁之后阻塞了，超过了redis超时释放锁的时间，业务完成后就会误删其他线程的锁。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291152928.png",alt:"image-20220429114906585"}})]),t._v(" "),a("p",[a("strong",[t._v("解决方案：")])]),t._v(" "),a("ol",[a("li",[t._v("在获取锁时存入线程标识（可以用UUID表示）")]),t._v(" "),a("li",[t._v("在释放锁时先获取锁中的线程标示，判断是否与当前线程一致\n"),a("ul",[a("li",[t._v("如果一致则释放锁")]),t._v(" "),a("li",[t._v("如果不一致则不释放锁")])])])]),t._v(" "),a("h4",{attrs:{id:"原子性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子性问题"}},[t._v("#")]),t._v(" 原子性问题")]),t._v(" "),a("p",[a("strong",[t._v("线程一判断锁标识是否一致之后，阻塞了，也可能会误删其他线程的锁。")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291157557.png",alt:"image-20220429115736863"}}),t._v(" "),a("p",[a("strong",[t._v("因此判断锁标识和释放锁必须是原子操作")])]),t._v(" "),a("h3",{attrs:{id:"lua-脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua-脚本"}},[t._v("#")]),t._v(" Lua 脚本")]),t._v(" "),a("p",[a("strong",[t._v("Redis 提供的脚本，可以在一个脚本中编写多条 Redis 命令，确保多条命令原子执行。")])]),t._v(" "),a("p",[t._v("释放锁的业务流程：")]),t._v(" "),a("ol",[a("li",[t._v("获取锁中的线程标示")]),t._v(" "),a("li",[t._v("判断是否与指定的标示（当前线程标示）一致")]),t._v(" "),a("li",[t._v("如果一致则释放锁（删除）")]),t._v(" "),a("li",[t._v("如果不一致则什么都不做")])]),t._v(" "),a("p",[a("strong",[t._v("如果用Lua脚本来表示则是这样的：")])]),t._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 这里的KEYS[1]就是锁的key，这里的ARGV[1]就是当前线程标示")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 获取锁中的标示，判断是否与当前线程标示一致")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" KEYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ARGV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 一致")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DEL'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" KEYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 不一致，则直接返回")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("p",[t._v("使用 java 执行脚本")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化脚本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultRedisScript")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" UNLOCK_SCRIPT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    UNLOCK_SCRIPT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultRedisScript")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    UNLOCK_SCRIPT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLocation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassPathResource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unlock.lua"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    UNLOCK_SCRIPT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setResultType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    stringRedisTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        UNLOCK_SCRIPT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("singletonList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("KEY_PREFIX "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        ID_PREFIX "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"redisson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redisson"}},[t._v("#")]),t._v(" Redisson")]),t._v(" "),a("p",[a("strong",[t._v("基于setnx实现的分布式锁存在下面的问题：")])]),t._v(" "),a("ol",[a("li",[t._v("**不可重入：**同一个线程无法多次获取同一把锁")]),t._v(" "),a("li",[t._v("**不可重试：**获取锁只尝试一次就返回false，没有重试机制")]),t._v(" "),a("li",[t._v("**超时释放：**锁超时释放虽然可以避免死锁，但如果是业务执行耗时较长，也会导致锁释放，存在安全隐患")]),t._v(" "),a("li",[t._v("**主从一致性：**如果Redis提供了主从集群，主从同步存在延迟，当主宕机时，如果从并同步主中的锁数据，则会出现锁实现")])]),t._v(" "),a("p",[a("strong",[t._v("Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现：")])]),t._v(" "),a("ul",[a("li",[t._v("可重入锁")]),t._v(" "),a("li",[t._v("公平锁")]),t._v(" "),a("li",[t._v("联锁")]),t._v(" "),a("li",[t._v("红锁")]),t._v(" "),a("li",[t._v("读写锁")]),t._v(" "),a("li",[t._v("信号量")]),t._v(" "),a("li",[t._v("可过期性信号量")]),t._v(" "),a("li",[t._v("闭锁")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://redisson.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/redisson/redisson",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"redisson-入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redisson-入门"}},[t._v("#")]),t._v(" Redisson 入门")]),t._v(" "),a("p",[t._v("1、引入依赖")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.redisson"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("redisson"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("3.13.6</version\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("2、配置 Redisson 客户端：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RedisConfig")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RedissonClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("redissonClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置类")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Config")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useSingleServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ip"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Redisson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("3、使用 Redisson 的分布式锁")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Resource")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RedissonClient")]),t._v(" redissonClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testRedisson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取锁（可重入），指定锁的名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rlock")]),t._v(" lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redissonClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"anyLock"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试获取锁，参数分别是：获取锁的最大等待时间（期间会重试），锁自动释放时间，时间单位")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" isLock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isLock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放锁")]),t._v("\n            lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"redisson-可重入锁原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redisson-可重入锁原理"}},[t._v("#")]),t._v(" Redisson 可重入锁原理")]),t._v(" "),a("p",[a("strong",[t._v("类似于 ReenternLock 的原理，判断当前锁是否已被获取，如果已被获取，判断锁的标识是否为当前线程，是的话也会让它获取锁。")])]),t._v(" "),a("p",[t._v("增加了计数器，每当线程重入一次，计数器就加一；线程结束则计数器减一，当计数器减到零，就释放锁。")]),t._v(" "),a("p",[t._v("使用 Redis 中的 hash 结构，存储:")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291527694.png",alt:"image-20220429152548189"}}),t._v(" "),a("p",[a("strong",[t._v("可重入锁获取与释放流程：")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291527645.png",alt:"image-20220429152724608"}}),t._v(" "),a("h4",{attrs:{id:"获取锁的-lua-脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取锁的-lua-脚本"}},[t._v("#")]),t._v(" 获取锁的 Lua 脚本：")]),t._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" KEYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--锁的key ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" threadId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ARGV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 线程唯一标识")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" releaseTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ARGV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 锁的自动释放时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 判断是否存在")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exists'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" O"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 不存在，获取锁")]),t._v("\n\tredis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hset'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" threadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--设置有效期")]),t._v("\n\tredis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'expire'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" releaseTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--返回结果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 锁已经存在，判断threadId是否是自己")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hexists'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key，threadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 不存在，获取锁，重人次数+1")]),t._v("\n\tredis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hincrby'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" threadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置有效期")]),t._v("\n\tredis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'expire'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" releaseTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 返回结果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" O"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--代码走到这里，说明获取锁的不是自己，获取锁失败")]),t._v("\n")])])]),a("h4",{attrs:{id:"释放锁的-lua-脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#释放锁的-lua-脚本"}},[t._v("#")]),t._v(" 释放锁的 Lua 脚本")]),t._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" KEYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--锁的key")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" threadId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ARGV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--线程唯一标识")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" releaseTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ARGV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 锁的自动释放时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 判断当前锁是否还是被自己持有")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HEXISTS'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" threadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Ο"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--如果已经不是自己，则直接返回")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 是自己的锁，则重入次数-1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HINCRBY'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("threadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 判断是否重人次数是否已经为0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" O"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 大于0说明不能释放锁，重置有效期然后返回")]),t._v("\n\tredis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EXPIRE'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" releaseTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--等于O说明可以释放锁，直接删除")]),t._v("\n\tredis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DEL'")]),t._v("，key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"redisson-可重试原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redisson-可重试原理"}},[t._v("#")]),t._v(" Redisson 可重试原理")]),t._v(" "),a("p",[a("strong",[t._v("利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制")])]),t._v(" "),a("p",[t._v("Redisson 的 lua 脚本，获取锁成功，返回nil；获取锁失败，返回锁的剩余有效期。")]),t._v(" "),a("p",[a("strong",[t._v("重试流程：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("判断是否在有效期内，如果在剩余有效期内，则开启重试流程")])]),t._v(" "),a("li",[a("p",[t._v("订阅释放锁的信号 "),a("code",[t._v("RFuture<RedissonLockEntry> subscribeFuture = subscribe(threadId);")])]),t._v(" "),a("p",[t._v("释放锁脚本中会释放锁："),a("code",[t._v("redis.call('publish', KEYS[2], ARGV[1]);")])])]),t._v(" "),a("li",[a("p",[t._v("等待直到剩余有效时间结束")])]),t._v(" "),a("li",[a("p",[t._v("如果还没有结束，则重新判断有效期，并进入等待。")])])]),t._v(" "),a("h3",{attrs:{id:"redisson-超时续约原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redisson-超时续约原理"}},[t._v("#")]),t._v(" Redisson 超时续约原理")]),t._v(" "),a("p",[a("strong",[t._v("利用watchDog，每隔一段时间（releaseTime /3），重置超时时间")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("要确保锁是业务执行完才释放，而不是超时了释放。因此 Redisson 会在尝试获取锁的时候，判断有没有设置超时时间，如果没有设置，则默认使用看门狗超时时间（30s）")])]),t._v(" "),a("li",[a("p",[t._v("获取锁，返回剩余时间ttlRemaining等于null，则获取锁成功")])]),t._v(" "),a("li",[a("p",[t._v("更新续期 scheduleExpirationRenewal(threadId)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("RedissonLock 类中有一个static final 的 ConcurrentMap："),a("strong",[t._v("EXPIRATION_RENEWAL_MAP")]),t._v("，所有线程实例的锁都可以放到这个 map 中。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291736381.png",alt:"image-20220429173651026"}})])]),t._v(" "),a("li",[a("p",[t._v("putIfAbsent 放入新的锁，则返回 null；如果放入的锁已经存在了，则返回旧的锁")])]),t._v(" "),a("li",[a("p",[t._v("如果来的是新的锁，则进行续约操作，更新有效期")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("renewExpiration 会创建一个 Timeout 任务，在看门狗 / 3 (10s) 后执行，执行lua脚本刷新有效时间。并递归调用自身，在 10 秒后继续刷新。")])])])])]),t._v(" "),a("li",[a("p",[t._v("当释放锁之后，会调用取消刷新任务：")]),t._v(" "),a("ul",[a("li",[t._v("从 "),a("strong",[t._v("EXPIRATION_RENEWAL_MAP")]),t._v(" 中取出当前锁，计数器 - 1，取消 Timeout 任务，把 "),a("strong",[t._v("EXPIRATION_RENEWAL_MAP")]),t._v(" 中的当前锁 remove 掉")])])])]),t._v(" "),a("h3",{attrs:{id:"整体流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体流程图"}},[t._v("#")]),t._v(" 整体流程图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204291613655.png",alt:"image-20220429161321075"}})]),t._v(" "),a("h3",{attrs:{id:"联锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联锁"}},[t._v("#")]),t._v(" 联锁")]),t._v(" "),a("p",[a("strong",[t._v("对于集群的每个节点都保存锁，获取锁的时候必须判断其他节点都没有获取锁，才能拿到。解决了主从一致性导致的锁失效的问题")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RLock")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@BeforeEach")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RLock")]),t._v(" lockl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redissonClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name："),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"order"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RLock")]),t._v(" lock2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redissonClien2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name："),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"order"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RLock")]),t._v(" lock3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redissonClien3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name："),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"order"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建联锁 multiLock ")]),t._v("\n    lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redissonClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMultiLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lockl，lock2，lock3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"优化秒杀业务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化秒杀业务"}},[t._v("#")]),t._v(" 优化秒杀业务")]),t._v(" "),a("p",[a("strong",[t._v("因为添加了很多分布式锁，因此秒杀业务的性能会受到很大影响，因此需要做进一步优化")])]),t._v(" "),a("p",[t._v("需求：")]),t._v(" "),a("ol",[a("li",[t._v("新增秒杀优惠卷同时，将优惠卷信息保存到 Redis 中")]),t._v(" "),a("li",[t._v("基于 Lua 脚本，判断秒杀库存、一人一单，决定用户是否抢购成功")]),t._v(" "),a("li",[t._v("如果抢购成功，将优惠卷 id 和用户 id 封装后存入阻塞队列")]),t._v(" "),a("li",[t._v("开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能")])]),t._v(" "),a("h2",{attrs:{id:"redis消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis消息队列"}},[t._v("#")]),t._v(" Redis消息队列")]),t._v(" "),a("h3",{attrs:{id:"list-模拟消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-模拟消息队列"}},[t._v("#")]),t._v(" List 模拟消息队列")]),t._v(" "),a("p",[a("strong",[t._v("使用 "),a("code",[t._v("BLPUSH")]),t._v(" 和 "),a("code",[t._v("BRPOP")]),t._v(" 来实现阻塞效果")])]),t._v(" "),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("ul",[a("li",[t._v("利用Redis存储，不受限于JVM内存上限")]),t._v(" "),a("li",[t._v("基于Redis的持久化机制，数据安全性有保证")]),t._v(" "),a("li",[t._v("可以满足消息有序性")])]),t._v(" "),a("p",[a("strong",[t._v("缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("无法避免消息丢失")]),t._v(" "),a("li",[t._v("只支持单消费者")])]),t._v(" "),a("h3",{attrs:{id:"基于-pubsub-的消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-pubsub-的消息队列"}},[t._v("#")]),t._v(" 基于 PubSub 的消息队列")]),t._v(" "),a("p",[t._v("PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，"),a("strong",[t._v("消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("**SUBSCRIBE channel[channel]：**订阅一个或多个频道")]),t._v(" "),a("li",[t._v("**PUBLISH channel nisg：**向一个频道发送消息")]),t._v(" "),a("li",[t._v("**PSUBSCRIBE pattern[pattern]：**订阅与pattern格式匹配的所有频道")])]),t._v(" "),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("ul",[a("li",[t._v("采用发布订阅模型，支持多生产、多消费")])]),t._v(" "),a("p",[a("strong",[t._v("缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("不支持数据持久化")]),t._v(" "),a("li",[t._v("无法避免消息丢失")]),t._v(" "),a("li",[t._v("消息堆积有上限，超出时数据丢失")])]),t._v(" "),a("h3",{attrs:{id:"基于-stream-的消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-stream-的消息队列"}},[t._v("#")]),t._v(" 基于 Stream 的消息队列")]),t._v(" "),a("p",[a("strong",[t._v("Stream 是Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列。")])]),t._v(" "),a("p",[a("strong",[t._v("发消息：XADD")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204292310788.png",alt:"image-20220429231000782"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204292310823.png",alt:"image-20220429231040778"}})]),t._v(" "),a("p",[a("strong",[t._v("读消息的方式之一：XREAD")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202204292314224.png",alt:"image-20220429231358391"}})]),t._v(" "),a("p",[a("strong",[t._v("阻塞方式读取最新的消息：")]),t._v(" "),a("code",[t._v("XREAD COUNT 1 BLOCK 0 STREAMS s1 $")]),t._v("，最多读取一条消息，永久阻塞，读取s1的最新消息")]),t._v(" "),a("p",[t._v("在业务开发中，我们可以循环的调用XREAD阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试读取队列中的消息，最多阻塞2秒")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XREAD COUNT 1 BLOCK 2000 STREAMS users $"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理消息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("**注意：**当我们指定起始ID为$时，代表读取最新的消息，"),a("strong",[t._v("如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现漏读消息的问题。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("STREAM类型消息队列的XREAD命令特点：")])]),t._v(" "),a("ul",[a("li",[t._v("消息可回溯")]),t._v(" "),a("li",[t._v("一个消息可以被多个消费者读取")]),t._v(" "),a("li",[t._v("可以阻塞读取")]),t._v(" "),a("li",[t._v("有消息漏读的风险")])]),t._v(" "),a("h3",{attrs:{id:"基于-stream-的消息队列-消费者组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-stream-的消息队列-消费者组"}},[t._v("#")]),t._v(" 基于 Stream 的消息队列——消费者组")]),t._v(" "),a("p",[a("strong",[t._v("消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：")])]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("消费分流")])]),t._v(" "),a("p",[t._v("队列中的消息会分流给组内的不同消费者，而不是重复消费，从而加快消息处理的速度")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("消费标识")])]),t._v(" "),a("p",[t._v("消费者组会维护一个标示，记录最后一个被处理的消息，哪怕消费者启机重启，还会从标示之后读取消息。确保每一个消息都会被消费")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("消息确认")])]),t._v(" "),a("p",[t._v("消费者获取消息后，消息处于pending状态，并存入一个pending-list。当处理完成后需要通过XACK来确认消息，标记消息为已处理，才会从pending-List移除。")])])]),t._v(" "),a("h4",{attrs:{id:"创建消费者组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建消费者组"}},[t._v("#")]),t._v(" 创建消费者组")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("XGROUP CREATE key groupName ID "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MKSTREAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("**key：**队列名称")]),t._v(" "),a("li",[t._v("**groupName：**消费者组名称")]),t._v(" "),a("li",[t._v("**ID：**起始ID标示，$代表队列中最后一个消息，o则代表队列中第一个消息")]),t._v(" "),a("li",[t._v("**MKSTREAM：**队列不存在时自动创建队列")])]),t._v(" "),a("p",[a("strong",[t._v("其他常见命令：")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205031403504.png",alt:"image-20220503140256150"}}),t._v(" "),a("h4",{attrs:{id:"从消费者组读取消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从消费者组读取消息"}},[t._v("#")]),t._v(" 从消费者组读取消息")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("XREADGROUP GROUP group consumer "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("COUNT count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BLOCK milliseconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NOACK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" STREAMS key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ID "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ID "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("**group：**消费组名称")]),t._v(" "),a("li",[t._v("**consumer：**消费者名称，如果消费者不存在，会自动创建一个消费者count：本次查询的最大数量")]),t._v(" "),a("li",[t._v("**BLOCK milliseconds：**当没有消息时最长等待时间NOACK：无需手动ACK，获取到消息后自动确认")]),t._v(" "),a("li",[t._v("**STREAMS key：**指定队列名称")]),t._v(" "),a("li",[t._v("**ID：**获取消息的起始ID：\n"),a("ul",[a("li",[t._v('**">"：**从下一个未消费的消息开始')]),t._v(" "),a("li",[t._v("**其它：**根据指定idMpending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始")])])])]),t._v(" "),a("p",[a("strong",[t._v("例：创建和读取")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205031413725.png",alt:"image-20220503141357291"}})]),t._v(" "),a("p",[t._v("没有确认的消息则进入 Pending List 中")]),t._v(" "),a("p",[a("strong",[t._v("确认消息和查看 Pending List")])]),t._v(" "),a("p",[a("code",[t._v("- + 10")]),t._v(" 表示从最小到最大的 10 个 id")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205031417869.png",alt:"image-20220503141655657"}}),t._v(" "),a("p",[a("strong",[t._v("读取 Pending List 中的第一条消息（把 > 改成 0）并确认：")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205031421537.png",alt:"image-20220503142118746"}}),t._v(" "),a("p",[a("strong",[t._v("java代码处理消费者组逻辑：")])]),t._v(" "),a("ol",[a("li",[t._v("先去消费者组里读取消息，没读到就循环继续读")]),t._v(" "),a("li",[t._v("读到了，处理消息，确认消息")]),t._v(" "),a("li",[t._v("如果处理消息的过程中发生异常，没有确认消息，则从Pending List中读取消息")]),t._v(" "),a("li",[t._v("读取到消息，重新处理，否则一直循环")])]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205031426758.png",alt:"image-20220503142603965"}}),t._v(" "),a("h4",{attrs:{id:"stream类型消息队列的xreadgroup命令特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream类型消息队列的xreadgroup命令特点"}},[t._v("#")]),t._v(" STREAM类型消息队列的XREADGROUP命令特点：")]),t._v(" "),a("ul",[a("li",[t._v("消息可回溯")]),t._v(" "),a("li",[t._v("可以多消费者争抢消息，加快消费速度")]),t._v(" "),a("li",[t._v("可以阻塞读取")]),t._v(" "),a("li",[t._v("没有消息漏读的风险")]),t._v(" "),a("li",[t._v("有消息确认机制，保证消息至少被消费一次")])]),t._v(" "),a("h3",{attrs:{id:"redis-消息队列总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-消息队列总结"}},[t._v("#")]),t._v(" Redis 消息队列总结")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205031429447.png",alt:"image-20220503142954711"}}),t._v(" "),a("h2",{attrs:{id:"分布式缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式缓存"}},[t._v("#")]),t._v(" 分布式缓存")]),t._v(" "),a("ul",[a("li",[t._v("Redis 持久化")]),t._v(" "),a("li",[t._v("Redis 主从")]),t._v(" "),a("li",[t._v("Redis 哨兵")]),t._v(" "),a("li",[t._v("Redis 分片集群")])]),t._v(" "),a("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/677ddf9de56c4df8b14e166d40e4db93-image-20220504194515086.png",alt:"image-20220504194515086"}}),t._v(" "),a("h3",{attrs:{id:"redis-持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-持久化"}},[t._v("#")]),t._v(" Redis 持久化")]),t._v(" "),a("h4",{attrs:{id:"rdb-持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb-持久化"}},[t._v("#")]),t._v(" RDB 持久化")]),t._v(" "),a("p",[a("strong",[t._v("RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。")])]),t._v(" "),a("p",[a("strong",[t._v("命令：")])]),t._v(" "),a("p",[a("code",[t._v("sava")]),t._v("：在主进程中执行，因此会阻塞所有命令，不推荐使用。")]),t._v(" "),a("p",[a("code",[t._v("bgsave")]),t._v("：开启子进程执行，避免主进程受到影响")]),t._v(" "),a("p",[a("strong",[t._v("Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 900秒内，如果至少有1个key被修改，则执行bgsave，如果是save""则表示禁用RDB')]),t._v("\nsave "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("900")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nsave "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nsave "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\n")])])]),a("p",[a("strong",[t._v("RDB的其它配置也可以在redis.conf文件中设置：")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否压缩，建议不开启，压缩也会消耗cpu，磁盘的话不值钱")]),t._v("\nrdbcompression "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yes")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# RDB文件名称")]),t._v("\ndbfilename dump.rdb\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文件保存的路径目录")]),t._v("\ndir./\n")])])]),a("h5",{attrs:{id:"rdb-的-fork-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb-的-fork-原理"}},[t._v("#")]),t._v(" RDB 的 fork 原理")]),t._v(" "),a("p",[t._v("bgsave 开始时会 fork 主进程得到子进程，子进程"),a("strong",[t._v("共享")]),t._v("主进程的内存数据。完成 fork 后读取内存数据并写入RDB 文件。")]),t._v(" "),a("blockquote",[a("p",[t._v("Linux 的进程无法直接操作物理内存，而是cpu 分配一个虚拟内存。主进程 fork 的时候，把虚拟内存的页表拷贝给子进程，从而可以操作同一个物理内存。")])]),t._v(" "),a("p",[t._v("fork 采用的是 copy-on-write 技术：")]),t._v(" "),a("ul",[a("li",[t._v("当主进程执行读操作时，访问共享内存；")]),t._v(" "),a("li",[t._v("当主进程执行写操作时，则会拷贝一份数据，执行写操作。")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205042010729.png",alt:"image-20220504201036057"}}),t._v(" "),a("h5",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),a("p",[a("strong",[t._v("RDB方式bgsave的基本流程？")])]),t._v(" "),a("ul",[a("li",[t._v("fork主进程得到一个子进程，共享内存空间")]),t._v(" "),a("li",[t._v("子进程读取内存数据并写入新的RDB文件")]),t._v(" "),a("li",[t._v("用新RDB文件替换旧的RDB文件")])]),t._v(" "),a("p",[a("strong",[t._v("RDB会在什么时候执行？save 60 1000代表什么含义？")])]),t._v(" "),a("ul",[a("li",[t._v("默认是服务停止时。")]),t._v(" "),a("li",[t._v("代表60秒内至少执行1000次修改则触发")])]),t._v(" "),a("p",[a("strong",[t._v("RDB RDB的缺点？")])]),t._v(" "),a("ul",[a("li",[t._v("RDB执行间隔时间长，两次RDB之间写入数据有丢失的风险")]),t._v(" "),a("li",[t._v("fork子进程、压缩、写出RDB文件都比较耗时")])]),t._v(" "),a("h4",{attrs:{id:"aof-持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aof-持久化"}},[t._v("#")]),t._v(" AOF 持久化")]),t._v(" "),a("p",[a("strong",[t._v("AOF全称为 Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。")])]),t._v(" "),a("p",[t._v("AOF 默认是关闭的，需要修改 redis.conf 配置文件来开启：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否开启AOF功能，默认是no ")]),t._v("\nappendonly "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AOF文件的名称")]),t._v("\nappendfilename "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"appendonly.aof"')]),t._v("\n")])])]),a("p",[t._v("AOF 的命令记录频率也可以通过 redis.conf 文件来配：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#表示每执行一次写命令，立即记录到AOF文件")]),t._v("\nappendfsync always\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案")]),t._v("\nappendfsync everysec\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘")]),t._v("\nappendfsync no\n")])])]),a("p",[t._v("因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行 "),a("strong",[t._v("bgrewriteaof")]),t._v(" 命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205042023568.png",alt:"image-20220504202249948"}}),t._v(" "),a("p",[t._v("Redis也会在触发阅值时自动去重写AOF文件。阅值也可以在redis.conf中配置：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#AOF文件比上次文件 增长超过多少百分比则触发重写")]),t._v("\nauto-aof-rewrite-percentage "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#AOF文件体积最小多大以上才触发重写")]),t._v("\nauto-aof-rewrite-min-size 64mb\n")])])]),a("h4",{attrs:{id:"rdb-与-aof-对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb-与-aof-对比"}},[t._v("#")]),t._v(" RDB 与 AOF 对比")]),t._v(" "),a("p",[a("strong",[t._v("RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会结合两者来使用。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("RDB")]),t._v(" "),a("th",[t._v("AOF")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("持久化方式")])]),t._v(" "),a("td",[t._v("定时对整个内存做快照")]),t._v(" "),a("td",[t._v("记录每一次执行的命令")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("数据完整性")])]),t._v(" "),a("td",[t._v("不完整，两次备份之间会丢失")]),t._v(" "),a("td",[t._v("相对完整，取决于刷盘策略")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("文件大小")])]),t._v(" "),a("td",[t._v("会有压缩，文件体积小")]),t._v(" "),a("td",[t._v("记录命令，文件体积很大")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("宕机恢复速度")])]),t._v(" "),a("td",[t._v("很快")]),t._v(" "),a("td",[t._v("慢")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("数据恢复优先级")])]),t._v(" "),a("td",[t._v("低，因为数据完整性不如AOF")]),t._v(" "),a("td",[t._v("高，因为数据完整性更高")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("系统资源占用")])]),t._v(" "),a("td",[t._v("高，大量CPU和内存消耗")]),t._v(" "),a("td",[t._v("低，主要是磁盘IO资源，但AOF重写时会占用大量CPU和内存资源")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("使用场景")])]),t._v(" "),a("td",[t._v("可以容忍数分钟的数据丢失，追求更快的启动速度")]),t._v(" "),a("td",[t._v("对数据安全性要求较高常见")])])])]),t._v(" "),a("h3",{attrs:{id:"redis-主从"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-主从"}},[t._v("#")]),t._v(" Redis 主从")]),t._v(" "),a("p",[t._v("单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205042035461.png",alt:"image-20220504203513467"}}),t._v(" "),a("h4",{attrs:{id:"开启主从关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启主从关系"}},[t._v("#")]),t._v(" 开启主从关系：")]),t._v(" "),a("p",[t._v("使用replicaof或者slaveof（5.0以前）命令，有临时和永久两种模式：")]),t._v(" "),a("ul",[a("li",[t._v("修改配置文件（永久生效）\n"),a("ul",[a("li",[t._v("在redis.conf中添加一行配置："),a("code",[t._v("slaveof <masterip> <masterport>")])])])]),t._v(" "),a("li",[t._v("使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）\n"),a("ul",[a("li",[a("code",[t._v("slaveof <masterip> <masterport>")])])])])]),t._v(" "),a("p",[a("strong",[t._v("查看主从信息：")]),a("code",[t._v("INFO replication")])]),t._v(" "),a("h4",{attrs:{id:"数据同步原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据同步原理"}},[t._v("#")]),t._v(" 数据同步原理")]),t._v(" "),a("p",[a("strong",[t._v("主从第一次同步时全量同步：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205062246488.png",alt:"image-20220506224634344"}})]),t._v(" "),a("p",[a("strong",[t._v("master如何判断slave是不是第一次来同步数据？这里会用到两个很重要的概念：")])]),t._v(" "),a("ul",[a("li",[t._v("**Replication Id：**简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid")]),t._v(" "),a("li",[t._v("**offset：**偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。\n"),a("strong",[t._v("因此slave做数据同步，必须向master声明自己的replication id 和offset，master才可以判断到底需要同步哪些数据")])])]),t._v(" "),a("p",[a("strong",[t._v("master如何判断slave节点是不是第一次来做数据同步？")])]),t._v(" "),a("p",[t._v("判断 replid 是否与主节点一致")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205062250984.png",alt:"image-20220506225034873"}})]),t._v(" "),a("p",[a("strong",[t._v("总结：")])]),t._v(" "),a("p",[t._v("全量同步流程：")]),t._v(" "),a("ol",[a("li",[t._v("slave节点请求增量同步")]),t._v(" "),a("li",[t._v("master节点判断replid，发现不一致，拒绝增量同步")]),t._v(" "),a("li",[t._v("master将完整内存数据生成RDB，发送RDB到slave")]),t._v(" "),a("li",[t._v("slave清空本地数据，加载master的RDB master将RDB期间的命令记录在repl_baklog，并持续将log中的命令发送给slave")]),t._v(" "),a("li",[t._v("slave执行接收到的命令，保持与master之间的同步")])]),t._v(" "),a("p",[a("strong",[t._v("增量同步：")])]),t._v(" "),a("p",[t._v("主从第一次同步是全量同步，但如果slave重启后同步，则执行"),a("strong",[t._v("增量同步")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-img-1307960409.cos.ap-shanghai.myqcloud.com/img/202205062257401.png",alt:"image-20220506225702464"}})]),t._v(" "),a("p",[a("strong",[t._v("repl_baklog大小有上限，写满后会覆盖最早的数据。如果slave断开时间过久，导致尚未备份的数据被覆盖，则无法基于log做增量同步，只能再次全量同步。")])]),t._v(" "),a("p",[a("strong",[t._v("可以从以下几个方面来优化Redis主从就集群：")])]),t._v(" "),a("ul",[a("li",[t._v("在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘IO。")]),t._v(" "),a("li",[t._v("Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO")]),t._v(" "),a("li",[t._v("适当提高repl_baklog的大小，发现slave启机时尽快实现故障恢复，尽可能避免全量同步")]),t._v(" "),a("li",[t._v("限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力")])]),t._v(" "),a("h4",{attrs:{id:"总结全量同步和增量同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结全量同步和增量同步"}},[t._v("#")]),t._v(" 总结全量同步和增量同步")]),t._v(" "),a("p",[a("strong",[t._v("简述全量同步和增量同步区别？")])]),t._v(" "),a("ul",[a("li",[t._v("全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。")]),t._v(" "),a("li",[t._v("增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave")])]),t._v(" "),a("p",[a("strong",[t._v("什么时候执行全量同步？")])]),t._v(" "),a("ul",[a("li",[t._v("slave节点第一次连接master节点时")]),t._v(" "),a("li",[t._v("slave节点断开时间太久，repl_baklog中的offset已经被覆盖时")])]),t._v(" "),a("p",[a("strong",[t._v("什么时候执行增量同步？")])]),t._v(" "),a("ul",[a("li",[t._v("slave节点断开又恢复，并且在repl_baklog中能找到offset时")])])])}),[],!1,null,null,null);s.default=e.exports}}]);